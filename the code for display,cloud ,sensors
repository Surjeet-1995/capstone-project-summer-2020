#include <iobb.h> // Library to access GPIO
#include <time.h>  //Time Library   
#include <stdio.h> // Standard IO library
#include <unistd.h> //defines miscellaneous symbolic constants and types, and declares miscellaneous functions
#include <stdlib.h> //Includes some Standard C Libraries used for trigerring Command line
#include <string.h> // For using String Functions
#include <stdlib.h> // Includes several Stsndard library functions
#include <stdint.h> // Includes different tys of integers
#include <errno.h>  //Gives ability to debug errors
#include <linux/i2c.h> // I2c library for linux
#include <linux/i2c-dev.h> //I2C library for Linu
#include <sys/ioctl.h> //Input Output Control library
#include <fcntl.h> //File Control
#include <stdio.h> //Standard C input Output Library
#include <unistd.h> //defines miscellaneous symbolic constants and types, and declares miscellaneous functions
#include <string.h> //C Library for various String Operations
#include <termios.h> // Contains the definitions used by the terminal I/O interfaces 

#include <sys/types.h> //definitions for types like size_t , ssize_t
#include <sys/stat.h> //header defines the structure of the data returned by the functions fstat(), lstat(), and stat(), give file size
#include <fcntl.h> // FIle control, Open, clos
#include <stdbool.h> 


long int start, stop, count; // Variables to keep sensor time track

clock_t before, end; // Variables to calculate distance

clock_t onlinePing; // To track time of online ping

int letterCount = 0;  // To store letter count
int letterCountOld=0; // To store old value of Letter Count
int displaynum = 0;

int cflag1 = 1; // Flag to stabilize count for Sensor 1
int cflag2 = 1;  // Flag to stabilize count for Sensor 1

int distance1, distance2; // Variables to store distance for Sensor 1 and Sensor 2
int sens = 0; //Sensor Enable variable

void showNum(int a); // Function to Display NUmber

//Hexadecimal mapping for all character as per Display Datasheet
static const char* charmap[] = { 

  "0x3F",   // 0
  "0x06",   // 1
  "0x5B",   // 2
  "0x4F",   // 3
  "0x66",   // 4
  "0x6D",   // 5
  "0x7D",   // 6
  "0x07",   // 7
  "0x7F",   // 8
  "0x6F",   // 9
  "0x77",   // A
  "0x7C",   // B
  "0x39",   // C
  "0x5E",   // D
  "0x79",   // E
  "0x71",   // F
  "0x00",   // space
  "0x40",   // minus
};

int main(void)  
{  
  iolib_init();  //Initializing the iobb library
  iolib_setdir(8, 10, DigitalOut);  //Setting Pin as Output of a specific port 
  pin_low(8, 10); 
  iolib_setdir(8, 9, DigitalIn);   //Setting Pin as Input of a specific port 
  
  
  iolib_setdir(8, 12, DigitalOut);  //Setting Pin as Output of a specific port 
  pin_low(8, 12); 
  iolib_setdir(8, 11, DigitalIn);    //Setting Pin as Input of a specific port 
  
  //Initialize the display 
  //Sensing I2C commands to display vial System
  
	system("i2cset -y 2 0x70 0x21"); //Start Display Clock
	sleep(0.2);
	system("i2cset -y 2 0x70 0x81"); //Stop Blinking
	sleep(0.2);
	system("i2cset -y 2 0x70 0xEF"); //Full Brightness
	sleep(0.2);
	system("i2cset -y 2 0x70 0x00");// Initialize RAm
	sleep(0.2);
	system("i2cset -y 2 0x70 0x00 0x00"); // Show Nothing at Character 1
	sleep(0.2);
	system("i2cset -y 2 0x70 0x02 0x00");// Show Nothing at Character 2
	sleep(0.2);
	system("i2cset -y 2 0x70 0x04 0x00");// // Show Nothing at Clock DOts
	sleep(0.2);
	system("i2cset -y 2 0x70 0x06 0x00");// Show Nothing at Character 3
	sleep(0.2);
	system("i2cset -y 2 0x70 0x08 0x00");// Show Nothing at Character 4
	sleep(0.2);
  
  
  printf("STARTED NEW\n"); // Messga Print
  iolib_delay_ms(500); // Small Delay
  
  onlinePing = clock(); //Store Starting Time
  
  while(1)   // Infinite Loop
  {  
	printf("TRIGERRING US 1  - - "); // Messag Print
    pin_high(8, 10); // Trigger Ultrasonic1 for 10 uS 
    usleep(10); 
    pin_low(8, 10);
    
    //iolib_delay_ms(1);
    while(is_low(8, 9))// Wait for Echo Pulse to Start
    {		//printf(".");
			count+= 1;
			before = clock();
			
			if(count > 20000)
			{
				printf("Kindly Check Wiring of US 1\n");
				count = 0;
				break;
			}
			
			
	}
	
	count = 0;
	
	while(is_high(8, 9)) // Wait for Echo Pulse to finish
	{	
		//printf("_");
		count += 1;
		end = clock();
		if(count > 20000) // If it's taking too long
			{
				printf("Kindly Check Wiring of US 1 #\n");
				count = 0;
				break;
			}
			
	}
    
    clock_t difference = end - before; // Calculate Echo Pulse Time
    
    if( count > 0)
    {
    //printf("%d    ",before);
    //printf("%d    ",end);
    //printf("%d    Distance 1: ",difference);
    distance1 = difference/30; // Calculate Estimated Distance
    printf("Distnace 1: %d cm. \n",distance1);
	}
    
    //printf("\n");
    pin_low(8, 10); // Make sure Trigger Pin is low
    iolib_delay_ms(100);//Small delay to aloow sensor to settle
    start = 0;
    count=0;
    
    //////////////////////////////////////////////////////////////////////////
    
    printf("TRIGERRING US 2 - - ");
    pin_high(8, 12);  
    usleep(10); 
    pin_low(8, 12);
    
    //iolib_delay_ms(1);
    while(is_low(8, 11))
    {		//printf(".");
			count+= 1;
			before = clock();
			
			if(count > 20000)
			{
				printf("Kindly Check Wiring of US 2\n");
				count = 0;
				break;
			}
			
			
	}
	count = 0;
	while(is_high(8, 11))
	{	
		//printf("_");
		count += 1;
		end = clock();
		if(count > 20000)
			{
				printf("Kindly Check Wiring of US 2 # \n");
				count = 0;
				break;
			}
			
	}
    
    int difference2 = end - before;
    
    if( count > 0)
    {
    //printf("%d    ",before);
    //printf("%d    ",end);
    //printf("%d    Distance 2: ",difference);
    distance2 = difference2/30;
    printf("Distance 2: %d cm. \n",distance2);
	}
    
    //printf("\n");
    pin_low(8, 12);
    iolib_delay_ms(100);
    start = 0;
    count=0;
    
    //iolib_delay_ms(500);
    iolib_delay_ms(500);
    //sleep(1);
    
    
    //////////////////////////////////////////////////////////////////////////////////////////
    
    
	
	
    
    if(distance1 < 10 && cflag1 == 1) // If  Ultrasonic value less than 10, (Letter sensed )
    {
		letterCount += 1; // Increase the count
		cflag1 = 0; // Make Flag 0 so that 1 letter is not counted as many
		printf("Got a Letter \n");
		//iolib_delay_ms(500); // Small Delay
		sleep(1);
	}
	if(distance1 > 10 && cflag1 == 0) // When letter passes and no more in front of sensor
    {
		cflag1 = 1; // Make flag as 1 means ready to sense another letter
	}
	
	
	if(distance2 < 10 && cflag2 == 1) // If  Ultrasonic value less than 10, (Letter sensed )
    {
		letterCount -= 1; // Decrease the count
		cflag2 = 0; // Make Flag 0 so that 1 letter is not counted as many
		printf("Removed a Letter \n");
		//iolib_delay_ms(500); // Small Delay
		sleep(1);
		if(letterCount < 0) letterCount =0;
	}
	if(distance2 > 10 && cflag2 == 0) // When letter passes and no more in front of sensor
    {
		cflag2 = 1; // Make flag as 1 means ready to sense another letter
	}
	
	printf("Current Letter Count:  %d  \n", letterCount);
	printf("Current Display Number: %d \n",displaynum);
	printf("----------------------------------------\n");
	
	if(letterCount != displaynum) // to update display when thre is response fron sensors ONLY
     {
		 showNum(letterCount);
		 displaynum = letterCount;
	}
	
	
	///////////////////////////////////////////////////
    
    if((clock() - onlinePing) > 16*10000) // If LAst ping happened before more than 16 seconds
    {
		
	printf("Online Time \n"); // Time to update values online
    
    if(letterCount != letterCountOld) // Check if any new letter has arrived or removed since last time we updated 
    {
		
	printf("Letter Count Changed, Updating Online  \n"); 
    char d[5]; // A char array to store count
	
	char c[] = "curl \"https://api.thingspeak.com/update.json?api_key=9U5J3NOPMSLJQY1M&field1=";
	// Above is the base url with Write API key
	sprintf(d, "%d", letterCount); // Convert number to char array
	strcat(c,d); // Format BAse url to add new letter count
	strcat(c,"\"");// Add termination
	
	printf("#%s#", c); // SHow the final link at Stdout
	
	system(c); // Ping the Web link using Command line
	
     //system("curl \"https://api.thingspeak.com/update.json?api_key=9U5J3NOPMSLJQY1M&field1=153\"");
     
     printf("\n Done \n"); // Print done
     sleep(1);
     letterCountOld = letterCount;
	}
	
	onlinePing = clock(); // Update the new Online ping time
     
	}
     
     //////////////////////////////////////////////////////////////////////
     
     
    
    
    
      
  }  
  iolib_free();  
  return(0);  
  
  
}  

void showNum(int a) // Functipn to display Numbers on HT16k33 Display pack

{
	printf("Updating Display Num to:  %d  \n",a); // Show the Inout Number
	iolib_delay_ms(100); // Small delay for proper communication response
	//sleep(2);
f
if(a < 10) // If number is less than 10 (Single digit)
{
	system("i2cset -y 2 0x70 0x00 0x3F"); //Make initial 3 digits as 0
	sleep(0.1);// Small delay for proper communication response
	system("i2cset -y 2 0x70 0x02 0x3F"); //3f is hexadecimal code for 0
	sleep(0.1);
	
	system("i2cset -y 2 0x70 0x06 0x3F"); // making the value of chracter 3 to zero
	sleep(0.1);
	char command[30] = "i2cset -y 2 0x70 0x08 ";
		strcat(command,charmap[(a%10)]); // Get Hexadecimal value to number as per datasheet //strcat addition of strings
		printf("%d command :  %s \n",a%10, command);
		system(command);//Send I2c command to display via System


}

else if(a < 100) // If 2 digit number
{
	system("i2cset -y 2 0x70 0x00 0x3F"); // Make first 2 digits as 0
	sleep(0.1); // Small delay for proper communication response
	system("i2cset -y 2 0x70 0x02 0x3F");
	sleep(0.1);
	
	char command[30] = "i2cset -y 2 0x70 0x06 "; // Put Tens Place Character on Display
	strcat(command,charmap[(a/10)]);
	printf("%d command :  %s \n",a/10, command);
	system(command);
	sleep(0.1);
	
	//Dividing a 2 digit number by 10 gives us the 10s Place character
	
	
	char command1[30] = "i2cset -y 2 0x70 0x08 "; // Put Unit Place character on display
	strcat(command1,charmap[(a%10)]);
	printf("%d command :  %s \n",a%10, command1);
	system(command1);


}

else if(a < 1000) // If 3 digit number
{
	system("i2cset -y 2 0x70 0x00 0x3F"); // Only first caharacter as 0
	sleep(0.1); // Small delay for proper communication response
	
	char command2[30] = "i2cset -y 2 0x70 0x02 "; // Put Hundred Place Character on Display
	strcat(command2,charmap[(a/100)]);
	printf("%d command2 :  %s \n",a/100, command2);
	system(command2); // to display in linux terminal
	//Dividing a 2 digit number by 100 gives us the 100s Place character
	
	
	sleep(0.1);
	system("i2cset -y 2 0x70 0x04 0x00");
	sleep(0.1);
	char command[30] = "i2cset -y 2 0x70 0x06 "; // Put Tens Place Character on Display
	strcat(command,charmap[((a/10)%10)]);
	printf("%d command :  %s \n",(a/10)%10, command);
	system(command); // to show the output in linux terminal
	sleep(0.1);
	char command1[30] = "i2cset -y 2 0x70 0x08 "; //// Put Unit Place Character on Display
	strcat(command1,charmap[(a%10)]);
	printf("%d command :  %s \n",a%10, command1);
	system(command1); // to show the output in linux terminal


}

iolib_delay_ms(100); // Small delay
//sleep(3);

}


